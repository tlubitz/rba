# python 2/3 compatibility
from __future__ import division, print_function
import sys
import os.path
import numpy
import pandas
import copy
import json
import jxmlease
import xml.etree.ElementTree as ET
import csv


# package imports
import rba
from rbastructure.model_Data import ModelData
from rbastructure.information_block import InformationBlock
from rbastructure.description_block import DescriptionBlock


class RBA_SimulationData(ModelData):
    """
    Class holding information on simulations with the model.
    Inherits from from rbastructure.model_Data ModelData

    Attributes
    ----------
    StructuralInformation : rbastructure.rba_ModelStructure RBA_ModelStructure object.
         Model description
    SessionName : str
         Name of simulation session
    ProteinData : rbastructure.information_block InformationBlock object.
         Simulated protein levels
    ReactionData : rbastructure.information_block InformationBlock object.
         Simulated reaction data
    EnzymeData : rbastructure.information_block InformationBlock object.
         Simulated enzyme data
    ProcessData : rbastructure.information_block InformationBlock object.
         Simulated process machinery data
    MetaboliteConstraintData : rbastructure.information_block InformationBlock object.
         Simulation information on mass-balance constraints
    DensityConstraintData : rbastructure.information_block InformationBlock object.
         Simulation information on compartment-density constraints
    ProcessConstraintData : rbastructure.information_block InformationBlock object.
         Simulation information on process-capacity constraints
    EnzymeConstraintData : rbastructure.information_block InformationBlock object.
         Simulation information on enzyme-efficiency constraints

    Methods
    ----------
    __init__(StaticData)
        Initiates Simulation data object

    fromSimulationResults(Controller, session_name)
        Imports data from rbastructure.RBA_Controler object

    fromJSON(inputString)
        Imports data from JSON string object

    toXML()
        Exports xml-file

    toJSON()
        Returns simulation data as JSON string

    exportSBtab()
        Exports SBtab files

    exportSBtab_OneFile()
        Exports simulation data in one single sbtab file

    exportCSV(deleteZerosRows=True)
        Exports simulation data as csv files

    exportEscherMap(type='fluxes')
        Exports input file for generation of Escher maps.

    exportProteoMap()
        Exports input file for the generation of Proteo maps from
        simulation data.
    """

    def __init__(self, StaticData):
        """
        Initiates Simulation data object

        Parameters
        ----------
        StaticData : rbastructure.RBA_ModelStructure
        """

        self.StructuralInformation = copy.deepcopy(StaticData)

        self.ProteinData = InformationBlock()
        self.ReactionData = InformationBlock()
        self.uniqueReactionData = InformationBlock()
        self.EnzymeData = InformationBlock()
        self.ProcessData = InformationBlock()
        self.MetaboliteConstraintData = InformationBlock()
        self.DensityConstraintData = InformationBlock()
        self.EnzymeConstraintData = InformationBlock()
        self.ProcessConstraintData = InformationBlock()
        self.GeneralRunInfo = DescriptionBlock()

        self.SessionName = ''

        self.ProteinData.fromDict({})
        self.ReactionData.fromDict({})
        self.uniqueReactionData.fromDict({})
        self.EnzymeData.fromDict({})
        self.ProcessData.fromDict({})
        self.MetaboliteConstraintData.fromDict({})
        self.DensityConstraintData.fromDict({})
        self.EnzymeConstraintData.fromDict({})
        self.ProcessConstraintData.fromDict({})
        self.GeneralRunInfo.fromDict({})

    def fromSimulationResults(self, Controller, session_name):
        """
        Imports data from rbastructure.RBA_Controler object

        Parameters
        ----------
        Controller : rbastructure.RBA_newControler
            Defines from which object to extract the data from
        session_name: str
            Defines the name of the session
            Is appended to the filenames generated by export methods.
        """

        self.SessionName = session_name

        ObjDict = {}
        for run in list(Controller.Results['ObjectiveValue']):
            ObjDict.update({run: Controller.Results['ObjectiveValue'].loc['ObjectiveValue', run]})

        MuDict = {}
        for run in list(Controller.Results['Mu']):
            MuDict.update({run: Controller.Results['Mu'].loc['Mu', run]})

        self.GeneralRunInfo.addEntries({'Mu': MuDict})
        self.GeneralRunInfo.addEntries({'Obj_Val': ObjDict})

        for reaction in list(Controller.Results['Reactions'].index):
            if reaction not in self.ReactionData.Elements:
                self.ReactionData.Elements.update({reaction: {}})
#            self.ReactionData.Elements[reaction].update({'ID': reaction})
            for run in list(Controller.Results['Reactions']):
                self.ReactionData.Elements[reaction].update(
                    {run: Controller.Results['Reactions'].loc[reaction, run]})

        for reaction in list(Controller.Results['uniqueReactions'].index):
            if reaction not in self.uniqueReactionData.Elements:
                self.uniqueReactionData.Elements.update({reaction: {}})
#            self.uniqueReactionData.Elements[reaction].update({'ID': reaction})
            for run in list(Controller.Results['uniqueReactions']):
                self.uniqueReactionData.Elements[reaction].update(
                    {run: Controller.Results['uniqueReactions'].loc[reaction, run]})

        for enzyme in list(Controller.Results['Enzymes'].index):
            if enzyme not in self.EnzymeData.Elements:
                self.EnzymeData.Elements.update({enzyme: {}})
#            self.EnzymeData.Elements[enzyme].update({'ID': enzyme})
            for run in list(Controller.Results['Enzymes']):
                self.EnzymeData.Elements[enzyme].update(
                    {run: Controller.Results['Enzymes'].loc[enzyme, run]})

        for process in list(Controller.Results['Processes'].index):
            if process not in self.ProcessData.Elements:
                self.ProcessData.Elements.update({process: {}})
#            self.ProcessData.Elements[process].update({'ID': process})
            for run in list(Controller.Results['Processes']):
                self.ProcessData.Elements[process].update(
                    {run: Controller.Results['Processes'].loc[process, run]})

        for protein in list(Controller.Results['Proteins'].index):
            if protein not in self.ProteinData.Elements:
                self.ProteinData.Elements.update({protein: {}})
#            self.ProteinData.Elements[protein].update({'ID': protein})
            for run in list(Controller.Results['Proteins']):
                self.ProteinData.Elements[protein].update(
                    {run: Controller.Results['Proteins'].loc[protein, run]})

        for constr in list(Controller.Results['Constraints'].index):
            if constr in list(self.StructuralInformation.MetaboliteConstraintsInfo.Elements.keys()):
                if constr not in self.MetaboliteConstraintData.Elements:
                    self.MetaboliteConstraintData.Elements.update({constr: {}})
#                self.MetaboliteConstraintData.Elements[constr].update({'ID': constr})
                for run in list(Controller.Results['Constraints']):
                    self.MetaboliteConstraintData.Elements[constr].update(
                        {run: Controller.Results['Constraints'].loc[constr, run]})
            if constr in list(self.StructuralInformation.DensityConstraintsInfo.Elements.keys()):
                if constr not in self.DensityConstraintData.Elements:
                    self.DensityConstraintData.Elements.update({constr: {}})
#                self.DensityConstraintData.Elements[constr].update({'ID': constr})
                for run in list(Controller.Results['Constraints']):
                    self.DensityConstraintData.Elements[constr].update(
                        {run: Controller.Results['Constraints'].loc[constr, run]})
            if constr in list(self.StructuralInformation.EnzymeConstraintsInfo.Elements.keys()):
                if constr not in self.EnzymeConstraintData.Elements:
                    self.EnzymeConstraintData.Elements.update({constr: {}})
#                self.EnzymeConstraintData.Elements[constr].update({'ID': constr})
                for run in list(Controller.Results['Constraints']):
                    self.EnzymeConstraintData.Elements[constr].update(
                        {run: Controller.Results['Constraints'].loc[constr, run]})
            if constr in list(self.StructuralInformation.ProcessConstraintsInfo.Elements.keys()):
                if constr not in self.ProcessConstraintData.Elements:
                    self.ProcessConstraintData.Elements.update({constr: {}})
#                self.ProcessConstraintData.Elements[constr].update({'ID': constr})
                for run in list(Controller.Results['Constraints']):
                    self.ProcessConstraintData.Elements[constr].update(
                        {run: Controller.Results['Constraints'].loc[constr, run]})

    def fromJSON(self, inputString):
        """
        Imports data from JSON string object

        Parameters
        ----------
        inputString: json-string
        """

        Block = json.loads(inputString)
        self.ReactionData = InformationBlock()
        self.ProteinData = InformationBlock()
        self.EnzymeData = InformationBlock()
        self.ProcessData = InformationBlock()
        self.MetaboliteConstraintData = InformationBlock()
        self.DensityConstraintData = InformationBlock()
        self.EnzymeConstraintData = InformationBlock()
        self.ProcessConstraintData = InformationBlock()
        self.ReactionData.fromDict(Block['ReactionData'])
        self.ProteinData.fromDict(Block['ProteinData'])
        self.EnzymeData.fromDict(Block['EnzymeData'])
        self.ProcessData.fromDict(Block['ProcessData'])
        self.MetaboliteConstraintData.fromDict(Block['MetaboliteConstraintData'])
        self.DensityConstraintData.fromDict(Block['DensityConstraintData'])
        self.EnzymeConstraintData.fromDict(Block['EnzymeConstraintData'])
        self.ProcessConstraintData.fromDict(Block['ProcessConstraintData'])

    def toXML(self):
        """
        Exports xml-file
        """

        x = htmlStyle(self)
        root = ET.fromstring(jxmlease.emit_xml(x, encoding='utf-8'))
        m = ET.tostring(root, 'utf-8')
        return(m)

    def exportSBtab(self):
        """
        Exports SBtab files
        """

        self.GeneralRunInfo.toSBtab_RunInfo(
            'RBA model', 'RunInformation', 'Run Information', 'RBAdata', 'Information on RBAdata')
        self.ReactionData.toSBtab('RBA model', 'ReactionData',
                                  'Reaction Data', 'RBAdata', 'Stored RBAdata')
        self.EnzymeData.toSBtab('RBA model', 'EnzymeData', 'Enzyme Data',
                                'RBAdata', 'Stored RBAdata')
        self.ProcessData.toSBtab('RBA model', 'ProcessData',
                                 'Process Data', 'RBAdata', 'Stored RBAdata')
        self.MetaboliteConstraintData.toSBtab(
            'RBA model', 'MetaboliteConstraintData', 'Metabolite Constraint Data', 'RBAdata', 'Stored RBAdata')
        self.DensityConstraintData.toSBtab(
            'RBA model', 'DensityConstraintData', 'Density Constraint Data', 'RBAdata', 'Stored RBAdata')
        self.EnzymeConstraintData.toSBtab(
            'RBA model', 'EnzymeConstraintData', 'Enzyme Constraint Data', 'RBAdata', 'Stored RBAdata')
        self.ProcessConstraintData.toSBtab(
            'RBA model', 'ProcessConstraintData', 'Process Constraint Data', 'RBAdata', 'Stored RBAdata')
        self.ProteinData.toSBtab('RBA model', 'ProteinData',
                                 'Run Information', 'RBAdata', 'Stored RBAdata')

    def exportSBtab_OneFile(self):
        """
        Exports simulation data in one single sbtab file
        """

        from sbtab import SBtab

        GeneralRunInfoTable = self.GeneralRunInfo.toSBtab_RunInfo_forDoc(
            'RBA_data', 'Quantity', 'Run Information', 'RBAdata', 'Information on RBAdata')
        ReactionDataTable = self.ReactionData.toSBtab_forDoc(
            'RBA_data', 'Quantity', 'Reaction Data', 'RBAdata', 'Stored RBAdata')
        EnzymeDataTable = self.EnzymeData.toSBtab_forDoc(
            'RBA_data', 'Quantity', 'Enzyme Data', 'RBAdata', 'Stored RBAdata')
        ProcessDataTable = self.ProcessData.toSBtab_forDoc(
            'RBA_data', 'Quantity', 'Process Data', 'RBAdata', 'Stored RBAdata')
        ProteinDataTable = self.ProteinData.toSBtab_forDoc(
            'RBA_data', 'Quantity', 'Protein Data', 'RBAdata', 'Stored RBAdata')
        MetaboliteConstraintDataTable = self.MetaboliteConstraintData.toSBtab_forDoc(
            'RBA_data', 'Quantity', 'Metabolite Constraint Data', 'RBAdata', 'Stored RBAdata')
        DensityConstraintDataTable = self.DensityConstraintData.toSBtab_forDoc(
            'RBA_data', 'Quantity', 'Density Constraint Data', 'RBAdata', 'Stored RBAdata')
        EnzymeConstraintDataTable = self.EnzymeConstraintData.toSBtab_forDoc(
            'RBA_data', 'Quantity', 'Enzyme Constraint Data', 'RBAdata', 'Stored RBAdata')
        ProcessConstraintDataTable = self.ProcessConstraintData.toSBtab_forDoc(
            'RBA_data', 'Quantity', 'Process Constraint Data', 'RBAdata', 'Stored RBAdata')

        GeneralRunInfoTable.filename = 'RunInfo.tsv'
        GeneralRunInfoTable.change_attribute('Text', 'Information on RBA runs')
        GeneralRunInfoTable.unset_attribute('Unit')
        GeneralRunInfoTable.change_attribute('TableID', 'RunInformation')
        GeneralRunInfoTable.unset_attribute('DocumentName')
        GeneralRunInfoTable.unset_attribute('Document')
        GeneralRunInfoTable.unset_attribute('Date')
        GeneralRunInfoTable.unset_attribute('SBtabVersion')

        ReactionDataTable.filename = 'ReactionData.tsv'
        ReactionDataTable.change_attribute('Text', 'Information on RBA reaction fluxes')
        ReactionDataTable.unset_attribute('Unit')
        ReactionDataTable.change_attribute('TableID', 'ReactionData')
        ReactionDataTable.unset_attribute('DocumentName')
        ReactionDataTable.unset_attribute('Document')
        ReactionDataTable.unset_attribute('Date')
        ReactionDataTable.unset_attribute('SBtabVersion')

        EnzymeDataTable.filename = 'EnzymeData.tsv'
        EnzymeDataTable.change_attribute('Text', 'Information on RBA enzyme concentrations')
        EnzymeDataTable.unset_attribute('Unit')
        EnzymeDataTable.change_attribute('TableID', 'EnzymeData')
        EnzymeDataTable.unset_attribute('DocumentName')
        EnzymeDataTable.unset_attribute('Document')
        EnzymeDataTable.unset_attribute('Date')
        EnzymeDataTable.unset_attribute('SBtabVersion')

        ProcessDataTable.filename = 'ProcessData.tsv'
        ProcessDataTable.change_attribute(
            'Text', 'Information on RBA process-machinery concentrations')
        ProcessDataTable.unset_attribute('Unit')
        ProcessDataTable.change_attribute('TableID', 'ProcessData')
        ProcessDataTable.unset_attribute('DocumentName')
        ProcessDataTable.unset_attribute('Document')
        ProcessDataTable.unset_attribute('Date')
        ProcessDataTable.unset_attribute('SBtabVersion')

        ProteinDataTable.filename = 'ProteinData.tsv'
        ProteinDataTable.change_attribute('Text', 'Information on RBA protein concentrations')
        ProteinDataTable.unset_attribute('Unit')
        ProteinDataTable.change_attribute('TableID', 'ProteinData')
        ProteinDataTable.unset_attribute('DocumentName')
        ProteinDataTable.unset_attribute('Document')
        ProteinDataTable.unset_attribute('Date')
        ProteinDataTable.unset_attribute('SBtabVersion')

        MetaboliteConstraintDataTable.filename = 'MetaboliteConstraintData.tsv'
        MetaboliteConstraintDataTable.change_attribute(
            'Text', 'Information on RBA mass-balance constraints')
        MetaboliteConstraintDataTable.unset_attribute('Unit')
        MetaboliteConstraintDataTable.change_attribute('TableID', 'MetaboliteConstraintData')
        MetaboliteConstraintDataTable.unset_attribute('DocumentName')
        MetaboliteConstraintDataTable.unset_attribute('Document')
        MetaboliteConstraintDataTable.unset_attribute('Date')
        MetaboliteConstraintDataTable.unset_attribute('SBtabVersion')

        DensityConstraintDataTable.filename = 'DensityConstraintData.tsv'
        DensityConstraintDataTable.change_attribute(
            'Text', 'Information on RBA compartment-crowding constraints')
        DensityConstraintDataTable.unset_attribute('Unit')
        DensityConstraintDataTable.change_attribute('TableID', 'DensityConstraintData')
        DensityConstraintDataTable.unset_attribute('DocumentName')
        DensityConstraintDataTable.unset_attribute('Document')
        DensityConstraintDataTable.unset_attribute('Date')
        DensityConstraintDataTable.unset_attribute('SBtabVersion')

        EnzymeConstraintDataTable.filename = 'EnzymeConstraintData.tsv'
        EnzymeConstraintDataTable.change_attribute(
            'Text', 'Information on RBA enzyme-capacities constraints')
        EnzymeConstraintDataTable.unset_attribute('Unit')
        EnzymeConstraintDataTable.change_attribute('TableID', 'EnzymeConstraintData')
        EnzymeConstraintDataTable.unset_attribute('DocumentName')
        EnzymeConstraintDataTable.unset_attribute('Document')
        EnzymeConstraintDataTable.unset_attribute('Date')
        EnzymeConstraintDataTable.unset_attribute('SBtabVersion')

        ProcessConstraintDataTable.filename = 'ProcessConstraintData.tsv'
        ProcessConstraintDataTable.change_attribute(
            'Text', 'Information on RBA process-capacities constraints')
        ProcessConstraintDataTable.unset_attribute('Unit')
        ProcessConstraintDataTable.change_attribute('TableID', 'ProcessConstraintData')
        ProcessConstraintDataTable.unset_attribute('DocumentName')
        ProcessConstraintDataTable.unset_attribute('Document')
        ProcessConstraintDataTable.unset_attribute('Date')
        ProcessConstraintDataTable.unset_attribute('SBtabVersion')

        Out = SBtab.SBtabDocument('RBAdata', GeneralRunInfoTable, 'RBA_data.tsv')
        # Out=SBtab.SBtabDocument('RBAdata',GeneralRunInfoTable,'RBA_data.tsv')
        Out.add_sbtab(ReactionDataTable)
        Out.add_sbtab(EnzymeDataTable)
        Out.add_sbtab(ProcessDataTable)
        Out.add_sbtab(ProteinDataTable)
        Out.add_sbtab(MetaboliteConstraintDataTable)
        Out.add_sbtab(DensityConstraintDataTable)
        Out.add_sbtab(EnzymeConstraintDataTable)
        Out.add_sbtab(ProcessConstraintDataTable)
        Out.change_attribute('DocumentName', 'RBA data')

        Out.name = 'RBA_data'
        Out.write()

    def toJSON(self):
        """
        Returns simulation data as JSON string

        Returns
        -------
        JSON string
        """

        Block = {'ReactionData': self.ReactionData.Elements,
                 'ProteinData': self.ProteinData.Elements,
                 'EnzymeData': self.EnzymeData.Elements,
                 'ProcessData': self.ProcessData.Elements,
                 'MetaboliteConstraintData': self.MetaboliteConstraintData.Elements,
                 'DensityConstraintData': self.DensityConstraintData.Elements,
                 'EnzymeConstraintData': self.EnzymeConstraintData.Elements,
                 'ProcessConstraintData': self.ProcessConstraintData.Elements}
        return(json.dumps(Block))

    def exportCSV(self, deleteZerosRows=True):
        """
        Exports simulation data as csv files

        Parameters
        ----------
        deleteZerosRows: bool
            Boolean wheter to remove rows which have only zero entries.
            (e.g. reactions which never carry flux in all runs)
            Default: True
        """

        if len(self.SessionName) > 0:
            filename = self.SessionName+'_GeneralInfo.csv'
        else:
            filename = 'GeneralInfo.csv'
        with open(filename, "w", newline='') as fp:
            wr = csv.writer(fp, dialect='excel')
            IDs = list(self.GeneralRunInfo.Elements.keys())
            wr.writerow([None]+list(self.GeneralRunInfo.Elements[IDs[0]].keys()))
            for i in list(IDs):
                valuerow = list(self.GeneralRunInfo.Elements[i].values())
                if deleteZerosRows:
                    if not all(v == 0 for v in valuerow):
                        row = [i]+valuerow
                        wr.writerow(row)
                else:
                    row = [i]+valuerow
                    wr.writerow(row)
        fp.close()

        if len(self.SessionName) > 0:
            filename = self.SessionName+'_ReactionData.csv'
        else:
            filename = 'ReactionData.csv'
        with open(filename, "w", newline='') as fp:
            wr = csv.writer(fp, dialect='excel')
            IDs = list(self.ReactionData.Elements.keys())
            wr.writerow([None]+list(self.ReactionData.Elements[IDs[0]].keys()))
            for i in list(IDs):
                valuerow = list(self.ReactionData.Elements[i].values())
                if deleteZerosRows:
                    if not all(v == 0 for v in valuerow):
                        row = [i]+valuerow
                        wr.writerow(row)
                else:
                    row = [i]+valuerow
                    wr.writerow(row)
        fp.close()

        if len(self.SessionName) > 0:
            filename = self.SessionName+'_EnzymeData.csv'
        else:
            filename = 'EnzymeData.csv'
        with open(filename, "w", newline='') as fp:
            wr = csv.writer(fp, dialect='excel')
            IDs = list(self.EnzymeData.Elements.keys())
            wr.writerow([None]+list(self.EnzymeData.Elements[IDs[0]].keys()))
            for i in list(IDs):
                valuerow = list(self.EnzymeData.Elements[i].values())
                if deleteZerosRows:
                    if not all(v == 0 for v in valuerow):
                        row = [i]+valuerow
                        wr.writerow(row)
                else:
                    row = [i]+valuerow
                    wr.writerow(row)
        fp.close()

        if len(self.SessionName) > 0:
            filename = self.SessionName+'_ProteinData.csv'
        else:
            filename = 'ProteinData.csv'
        with open(filename, "w", newline='') as fp:
            wr = csv.writer(fp, dialect='excel')
            IDs = list(self.ProteinData.Elements.keys())
            wr.writerow([None]+list(self.ProteinData.Elements[IDs[0]].keys()))
            for i in list(IDs):
                valuerow = list(self.ProteinData.Elements[i].values())
                if deleteZerosRows:
                    if not all(v == 0 for v in valuerow):
                        row = [i]+valuerow
                        wr.writerow(row)
                else:
                    row = [i]+valuerow
                    wr.writerow(row)
        fp.close()

        if len(self.SessionName) > 0:
            filename = self.SessionName+'_ProcessData.csv'
        else:
            filename = 'ProcessData.csv'
        with open(filename, "w", newline='') as fp:
            wr = csv.writer(fp, dialect='excel')
            IDs = list(self.ProcessData.Elements.keys())
            wr.writerow([None]+list(self.ProcessData.Elements[IDs[0]].keys()))
            for i in list(IDs):
                valuerow = list(self.ProcessData.Elements[i].values())
                if deleteZerosRows:
                    if not all(v == 0 for v in valuerow):
                        row = [i]+valuerow
                        wr.writerow(row)
                else:
                    row = [i]+valuerow
                    wr.writerow(row)
        fp.close()

        if len(self.SessionName) > 0:
            filename = self.SessionName+'_MetaboliteConstraintData.csv'
        else:
            filename = 'MetaboliteConstraintData.csv'
        with open(filename, "w", newline='') as fp:
            wr = csv.writer(fp, dialect='excel')
            IDs = list(self.MetaboliteConstraintData.Elements.keys())
            wr.writerow([None]+list(self.MetaboliteConstraintData.Elements[IDs[0]].keys()))
            for i in list(IDs):
                valuerow = list(self.MetaboliteConstraintData.Elements[i].values())
                if deleteZerosRows:
                    if not all(v == 0 for v in valuerow):
                        row = [i]+valuerow
                        wr.writerow(row)
                else:
                    row = [i]+valuerow
                    wr.writerow(row)
        fp.close()

        if len(self.SessionName) > 0:
            filename = self.SessionName+'_DensityConstraintData.csv'
        else:
            filename = 'DensityConstraintData.csv'
        with open(filename, "w", newline='') as fp:
            wr = csv.writer(fp, dialect='excel')
            IDs = list(self.DensityConstraintData.Elements.keys())
            wr.writerow([None]+list(self.DensityConstraintData.Elements[IDs[0]].keys()))
            for i in list(IDs):
                valuerow = list(self.DensityConstraintData.Elements[i].values())
                if deleteZerosRows:
                    if not all(v == 0 for v in valuerow):
                        row = [i]+valuerow
                        wr.writerow(row)
                else:
                    row = [i]+valuerow
                    wr.writerow(row)
        fp.close()

        if len(self.SessionName) > 0:
            filename = self.SessionName+'_ProcessConstraintData.csv'
        else:
            filename = 'ProcessConstraintData.csv'
        with open(filename, "w", newline='') as fp:
            wr = csv.writer(fp, dialect='excel')
            IDs = list(self.ProcessConstraintData.Elements.keys())
            wr.writerow([None]+list(self.ProcessConstraintData.Elements[IDs[0]].keys()))
            for i in list(IDs):
                valuerow = list(self.ProcessConstraintData.Elements[i].values())
                if deleteZerosRows:
                    if not all(v == 0 for v in valuerow):
                        row = [i]+valuerow
                        wr.writerow(row)
                else:
                    row = [i]+valuerow
                    wr.writerow(row)
        fp.close()

        if len(self.SessionName) > 0:
            filename = self.SessionName+'_EnzymeConstraintData.csv'
        else:
            filename = 'EnzymeConstraintData.csv'
        with open(filename, "w", newline='') as fp:
            wr = csv.writer(fp, dialect='excel')
            IDs = list(self.EnzymeConstraintData.Elements.keys())
            wr.writerow([None]+list(self.EnzymeConstraintData.Elements[IDs[0]].keys()))
            for i in list(IDs):
                valuerow = list(self.EnzymeConstraintData.Elements[i].values())
                if deleteZerosRows:
                    if not all(v == 0 for v in valuerow):
                        row = [i]+valuerow
                        wr.writerow(row)
                else:
                    row = [i]+valuerow
                    wr.writerow(row)
        fp.close()

    def exportEscherMap(self, type='fluxes'):
        """
        Exports input file for generation of Escher maps.

        https://escher.github.io

        If argument type is 'fluxes' the method return an Eschermap for the
        visualisation of reaction-fluxes
        If argument type is 'investment' the method return an Eschermap for the
        visualisation of the amount of amino-acids invested in enzyme machinery
        for reactions.

        Parameters
        ----------
        type: str ('fluxes' or 'investment')
        Default: 'fluxes'
        """

        if type is 'fluxes':
            IDs = [id[2:] for id in list(self.uniqueReactionData.Elements.keys())]
            for run in self.uniqueReactionData.Elements[list(self.uniqueReactionData.Elements.keys())[0]]:
                Values = [rxn[run] for rxn in list(self.uniqueReactionData.Elements.values())]
                intermediateReactionFluxes = dict(zip(IDs, Values))
                ReactionFluxes = {id: val for id,
                                  val in intermediateReactionFluxes.items() if val != 0.}
                if len(self.SessionName) > 0:
                    filename = self.SessionName+'_RBA_Eschermap_fluxes_'+run+'.json'
                else:
                    filename = 'RBA_Eschermap_fluxes_'+run+'.json'
                with open(filename, 'w') as fout:
                    fout.write(json.dumps(ReactionFluxes, indent=4))
        if type is 'investment':
            IDs = list(self.uniqueReactionData.Elements.keys())
            for run in self.uniqueReactionData.Elements[list(self.uniqueReactionData.Elements.keys())[0]]:
                Fluxes = [rxn[run] for rxn in list(self.uniqueReactionData.Elements.values())]
                Intermediate = zip(IDs, Fluxes)
                RxnsToTest = [i[0] for i in Intermediate if i[1] != 0.]
                Values = [determineInvestment(self, rxn, run) for rxn in RxnsToTest]
                ReactionInvestments = {id[2:]: val for id,
                                       val in dict(zip(RxnsToTest, Values)).items()}
                if len(self.SessionName) > 0:
                    filename = self.SessionName+'_RBA_Eschermap_investment_'+run+'.json'
                else:
                    filename = 'RBA_Eschermap_investment_'+run+'.json'
                with open(filename, 'w') as fout:
                    fout.write(json.dumps(ReactionInvestments, indent=4))

    def exportProteoMap(self):
        """
        Exports input file for the generation of Proteo maps from
        simulation data.

        https://www.proteomaps.net
        """

        IDs = list(self.ProteinData.Elements.keys())
        for run in self.ProteinData.Elements[list(self.ProteinData.Elements.keys())[0]]:
            Values = [protein[run] for protein in list(self.ProteinData.Elements.values())]
            intermediateProteinLevels = dict(zip(IDs, Values))
            ProteinLevels = {id: val for id, val in intermediateProteinLevels.items() if val != 0.}
            if len(self.SessionName) > 0:
                filename = self.SessionName+'_RBA_Proteomap_'+run+'.tsv'
            else:
                filename = 'RBA_Proteomap_'+run+'.tsv'
            with open(filename, 'w') as fout:
                fout.write('\n'.join(['{}\t{}'.format(p, l) for p, l in ProteinLevels.items()]))


def htmlStyle(structOriginal):
    struct = copy.deepcopy(structOriginal)
    for i in list(struct.ReactionData.Elements.keys()):
        struct.ReactionData.Elements['ID_' + i + '_Data'] = struct.ReactionData.Elements.pop(i)
    for i in list(struct.EnzymeData.Elements.keys()):
        struct.EnzymeData.Elements['ID_' + i + '_Data'] = struct.EnzymeData.Elements.pop(i)
    for i in list(struct.ProcessData.Elements.keys()):
        struct.ProcessData.Elements['ID_' + i + '_Data'] = struct.ProcessData.Elements.pop(i)
    for i in list(struct.ProteinData.Elements.keys()):
        struct.ProteinData.Elements['ID_' + i + '_Data'] = struct.ProteinData.Elements.pop(i)
    for i in list(struct.MetaboliteConstraintData.Elements.keys()):
        struct.MetaboliteConstraintData.Elements['ID_' + i +
                                                 '_Data'] = struct.MetaboliteConstraintData.Elements.pop(i)
    for i in list(struct.DensityConstraintData.Elements.keys()):
        struct.DensityConstraintData.Elements['ID_' + i +
                                              '_Data'] = struct.DensityConstraintData.Elements.pop(i)
    for i in list(struct.EnzymeConstraintData.Elements.keys()):
        struct.EnzymeConstraintData.Elements['ID_' + i +
                                             '_Data'] = struct.EnzymeConstraintData.Elements.pop(i)
    for i in list(struct.ProcessConstraintData.Elements.keys()):
        struct.ProcessConstraintData.Elements['ID_' + i +
                                              '_Data'] = struct.ProcessConstraintData.Elements.pop(i)
    Block = {'RunInfo': struct.GeneralRunInfo.JSONize(),
             'ReactionData': struct.ReactionData.JSONize(),
             'ProteinData': struct.ProteinData.JSONize(),
             'EnzymeData': struct.EnzymeData.JSONize(),
             'ProcessData': struct.ProcessData.JSONize(),
             'MetaboliteConstraintData': struct.MetaboliteConstraintData.JSONize(),
             'DensityConstraintData': struct.DensityConstraintData.JSONize(),
             'EnzymeConstraintData': struct.EnzymeConstraintData.JSONize(),
             'ProcessConstraintData': struct.ProcessConstraintData.JSONize()}
    return({'RBA_ModelData': {'SimulationData': Block}})


def htmlStyleAddingCol(structOriginal):
    struct = copy.deepcopy(structOriginal)
    for i in list(struct.ReactionData.Elements.keys()):
        count = 0
        for j in list(struct.ReactionData.Elements[i].keys()):
            if j is not 'correspondingElement':
                count += 1
                struct.ReactionData.Elements[i]['C' +
                                                str(count)+'___'+j] = struct.ReactionData.Elements[i].pop(j)
        struct.ReactionData.Elements['ID_' + i + '_Data'] = struct.ReactionData.Elements.pop(i)
    for i in list(struct.EnzymeData.Elements.keys()):
        count = 0
        for j in list(struct.EnzymeData.Elements[i].keys()):
            if j is not 'correspondingElement':
                count += 1
                struct.EnzymeData.Elements[i]['C' +
                                              str(count)+'___'+j] = struct.EnzymeData.Elements[i].pop(j)
        struct.EnzymeData.Elements['ID_' + i + '_Data'] = struct.EnzymeData.Elements.pop(i)
    for i in list(struct.ProcessData.Elements.keys()):
        count = 0
        for j in list(struct.ProcessData.Elements[i].keys()):
            if j is not 'correspondingElement':
                count += 1
                struct.ProcessData.Elements[i]['C' +
                                               str(count)+'___'+j] = struct.ProcessData.Elements[i].pop(j)
        struct.ProcessData.Elements['ID_' + i + '_Data'] = struct.ProcessData.Elements.pop(i)
    for i in list(struct.ProteinData.Elements.keys()):
        count = 0
        for j in list(struct.ProteinData.Elements[i].keys()):
            if j is not 'correspondingElement':
                count += 1
                struct.ProteinData.Elements[i]['C' +
                                               str(count)+'___'+j] = struct.ProteinData.Elements[i].pop(j)
        struct.ProteinData.Elements['ID_' + i + '_Data'] = struct.ProteinData.Elements.pop(i)
    for i in list(struct.MetaboliteConstraintData.Elements.keys()):
        count = 0
        for j in list(struct.MetaboliteConstraintData.Elements[i].keys()):
            if j is not 'correspondingElement':
                count += 1
                struct.MetaboliteConstraintData.Elements[i]['C'+str(
                    count)+'___'+j] = struct.MetaboliteConstraintData.Elements[i].pop(j)
        struct.MetaboliteConstraintData.Elements['ID_' + i +
                                                 '_Data'] = struct.MetaboliteConstraintData.Elements.pop(i)
    for i in list(struct.DensityConstraintData.Elements.keys()):
        count = 0
        for j in list(struct.DensityConstraintData.Elements[i].keys()):
            if j is not 'correspondingElement':
                count += 1
                struct.DensityConstraintData.Elements[i]['C' +
                                                         str(count)+'___'+j] = struct.DensityConstraintData.Elements[i].pop(j)
        struct.DensityConstraintData.Elements['ID_' + i +
                                              '_Data'] = struct.DensityConstraintData.Elements.pop(i)
    for i in list(struct.EnzymeConstraintData.Elements.keys()):
        count = 0
        for j in list(struct.EnzymeConstraintData.Elements[i].keys()):
            if j is not 'correspondingElement':
                count += 1
                struct.EnzymeConstraintData.Elements[i]['C' +
                                                        str(count)+'___'+j] = struct.EnzymeConstraintData.Elements[i].pop(j)
        struct.EnzymeConstraintData.Elements['ID_' + i +
                                             '_Data'] = struct.EnzymeConstraintData.Elements.pop(i)
    for i in list(struct.ProcessConstraintData.Elements.keys()):
        count = 0
        for j in list(struct.ProcessConstraintData.Elements[i].keys()):
            if j is not 'correspondingElement':
                count += 1
                struct.ProcessConstraintData.Elements[i]['C' +
                                                         str(count)+'___'+j] = struct.ProcessConstraintData.Elements[i].pop(j)
        struct.ProcessConstraintData.Elements['ID_' + i +
                                              '_Data'] = struct.ProcessConstraintData.Elements.pop(i)
    Block = {'RunInfo': struct.GeneralRunInfo.JSONize(),
             'ReactionData': struct.ReactionData.JSONize(),
             'ProteinData': struct.ProteinData.JSONize(),
             'EnzymeData': struct.EnzymeData.JSONize(),
             'ProcessData': struct.ProcessData.JSONize(),
             'MetaboliteConstraintData': struct.MetaboliteConstraintData.JSONize(),
             'DensityConstraintData': struct.DensityConstraintData.JSONize(),
             'EnzymeConstraintData': struct.EnzymeConstraintData.JSONize(),
             'ProcessConstraintData': struct.ProcessConstraintData.JSONize()}
    return({'RBA_ModelData': {'SimulationData': Block}})


def htmlStyleReplacingCol(structOriginal):
    struct = copy.deepcopy(structOriginal)
    for i in list(struct.ReactionData.Elements.keys()):
        count = 0
        for j in list(struct.ReactionData.Elements[i].keys()):
            if j is not 'correspondingElement':
                count += 1
                struct.ReactionData.Elements[i]['C' +
                                                str(count)] = struct.ReactionData.Elements[i].pop(j)
        struct.ReactionData.Elements['ID_' + i + '_Data'] = struct.ReactionData.Elements.pop(i)
    for i in list(struct.EnzymeData.Elements.keys()):
        count = 0
        for j in list(struct.EnzymeData.Elements[i].keys()):
            if j is not 'correspondingElement':
                count += 1
                struct.EnzymeData.Elements[i]['C'+str(count)] = struct.EnzymeData.Elements[i].pop(j)
        struct.EnzymeData.Elements['ID_' + i + '_Data'] = struct.EnzymeData.Elements.pop(i)
    for i in list(struct.ProcessData.Elements.keys()):
        count = 0
        for j in list(struct.ProcessData.Elements[i].keys()):
            if j is not 'correspondingElement':
                count += 1
                struct.ProcessData.Elements[i]['C' +
                                               str(count)] = struct.ProcessData.Elements[i].pop(j)
        struct.ProcessData.Elements['ID_' + i + '_Data'] = struct.ProcessData.Elements.pop(i)
    for i in list(struct.ProteinData.Elements.keys()):
        count = 0
        for j in list(struct.ProteinData.Elements[i].keys()):
            if j is not 'correspondingElement':
                count += 1
                struct.ProteinData.Elements[i]['C' +
                                               str(count)] = struct.ProteinData.Elements[i].pop(j)
        struct.ProteinData.Elements['ID_' + i + '_Data'] = struct.ProteinData.Elements.pop(i)
    for i in list(struct.MetaboliteConstraintData.Elements.keys()):
        count = 0
        for j in list(struct.MetaboliteConstraintData.Elements[i].keys()):
            if j is not 'correspondingElement':
                count += 1
                struct.MetaboliteConstraintData.Elements[i]['C' +
                                                            str(count)] = struct.MetaboliteConstraintData.Elements[i].pop(j)
        struct.MetaboliteConstraintData.Elements['ID_' + i +
                                                 '_Data'] = struct.MetaboliteConstraintData.Elements.pop(i)
    for i in list(struct.DensityConstraintData.Elements.keys()):
        count = 0
        for j in list(struct.DensityConstraintData.Elements[i].keys()):
            if j is not 'correspondingElement':
                count += 1
                struct.DensityConstraintData.Elements[i]['C' +
                                                         str(count)] = struct.DensityConstraintData.Elements[i].pop(j)
        struct.DensityConstraintData.Elements['ID_' + i +
                                              '_Data'] = struct.DensityConstraintData.Elements.pop(i)
    for i in list(struct.EnzymeConstraintData.Elements.keys()):
        count = 0
        for j in list(struct.EnzymeConstraintData.Elements[i].keys()):
            if j is not 'correspondingElement':
                count += 1
                struct.EnzymeConstraintData.Elements[i]['C' +
                                                        str(count)] = struct.EnzymeConstraintData.Elements[i].pop(j)
        struct.EnzymeConstraintData.Elements['ID_' + i +
                                             '_Data'] = struct.EnzymeConstraintData.Elements.pop(i)
    for i in list(struct.ProcessConstraintData.Elements.keys()):
        count = 0
        for j in list(struct.ProcessConstraintData.Elements[i].keys()):
            if j is not 'correspondingElement':
                count += 1
                struct.ProcessConstraintData.Elements[i]['C' +
                                                         str(count)] = struct.ProcessConstraintData.Elements[i].pop(j)
        struct.ProcessConstraintData.Elements['ID_' + i +
                                              '_Data'] = struct.ProcessConstraintData.Elements.pop(i)
    Block = {'RunInfo': struct.GeneralRunInfo.JSONize(),
             'ReactionData': struct.ReactionData.JSONize(),
             'ProteinData': struct.ProteinData.JSONize(),
             'EnzymeData': struct.EnzymeData.JSONize(),
             'ProcessData': struct.ProcessData.JSONize(),
             'MetaboliteConstraintData': struct.MetaboliteConstraintData.JSONize(),
             'DensityConstraintData': struct.DensityConstraintData.JSONize(),
             'EnzymeConstraintData': struct.EnzymeConstraintData.JSONize(),
             'ProcessConstraintData': struct.ProcessConstraintData.JSONize()}
    return({'RBA_ModelData': {'SimulationData': Block}})


def determineInvestment(SimData, rxn, run):
    investment = 0
    isoReactions = SimData.StructuralInformation.ReactionInfo.Elements[rxn]['Twins']+[rxn]
    enzymesToCheck = [SimData.StructuralInformation.ReactionInfo.Elements[r]['Enzyme'] for r in isoReactions if len(
        SimData.StructuralInformation.ReactionInfo.Elements[r]['Enzyme']) > 0]
    for enzy in enzymesToCheck:
        prots = SimData.StructuralInformation.EnzymeInfo.Elements[enzy]['Subunits']
        enzymeCost = 0
        for pr in list(prots.items()):
            SF = int(pr[1]['StochFac'])
            AAnum = SimData.StructuralInformation.ProteinInfo.Elements[pr[0]]['AAnumber']
            if numpy.isnan(AAnum):
                continue
            enzymeCost += SF*int(AAnum)
        investment += enzymeCost*SimData.EnzymeData.Elements[enzy][run]
    return(investment)
