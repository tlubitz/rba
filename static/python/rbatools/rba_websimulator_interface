import pandas
from .rba_Session import RBA_Session


class RBA_websimulator_interface(object):

    def __init__(self, xml_dir):
        self.rba_session = RBA_Session(xml_dir)
        self.change_log = pandas.DataFrame(
            columns=['model_parameter', 'function_parameter', 'parameter_type', 'old_value', 'new_value'])

    def get_model_parameter_value(self, parameter_type, species=None, output_format='dict'):
        return(self.rba_session.get_parameter_values(parameter_type, species=None, output_format='dict'))

    def get_model_parameter_definition(self, model_parameter):
        return(self.rba_session.get_parameter_definition(parameter=model_parameter))

    # def get_function_parameter_value(self,model_parameter,parameter_type,function_parameter):
        ##d#

    def set_parameter_value(self, model_parameter, parameter_type, function_parameter, new_value=None, logging=True):
        if new_value is not None:
            ## set parameter value ##
            if logging:
                change_df = pandas.DataFrame(
                    columns=['model_parameter', 'function_parameter', 'parameter_type', 'old_value', 'new_value'])
                change_df.loc[self.change_log.shape[0], 'model_parameter'] = model_parameter
                change_df.loc[self.change_log.shape[0], 'function_parameter'] = function_parameter
                change_df.loc[self.change_log.shape[0], 'parameter_type'] = parameter_type
                change_df.loc[self.change_log.shape[0], 'old_value'] = self.rba_session.get_parameter_values(
                    parameter_type, species=None, output_format='dict')
                change_df.loc[self.change_log.shape[0], 'new_value'] = new_value

    def undo_last_change(self):
        if self.change_log.shape[0] > 0:
            old_value = self.change_log.iloc[-1, :]['old_value']
            model_parameter = self.change_log.iloc[-1, :]['model_parameter']
            function_parameter = self.change_log.iloc[-1, :]['function_parameter']
            parameter_type = self.change_log.iloc[-1, :]['parameter_type']
            self.set_parameter_value(model_parameter=model_parameter, parameter_type=parameter_type,
                                     function_parameter=function_parameter, new_value=old_value, logging=False)
            self.change_log = self.change_log.iloc[:-1, :]

    def get_changes(self):
        return(self.change_log)